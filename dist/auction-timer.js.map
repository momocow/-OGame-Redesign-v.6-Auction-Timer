{"version":3,"sources":["auction-timer.js","../src/strings.js","../src/errors.js","../src/index.js"],"names":["NOT_SUPPORTED_ENV","NotSupportedError","name","Error","console","log"],"mappings":";AA8BA;;;;;;;;AC9BO,IAAMA,uLAAN;;ICSMC,iB;;;AACX,+BAAe;AAAA;;AAAA,2IACJD,iBADI;;AAEb,UAAKE,IAAL,GAAY,mBAAZ;AAFa;AAGd;;;EAJoCC,K;;ACPvCC,QAAQC,GAAR,CAAY,IAAIJ,iBAAJ,EAAZ","file":"../../../../../auction-timer.js","sourcesContent":["// ==UserScript==\n// @name           OGame Redesign (v.6): Auction Timer\n// @author         MomoCow\n// @namespace      https://github.com/momocow\n// @version        3.0.0\n// @description    Displays a countdown timer for the Auction in OGame 6.*\n// @include        *.ogame*gameforge.com/game/index.php?page=*\n// @updateURL      https://raw.githubusercontent.com/momocow/OGame-Redesign-v.6-Auction-Timer/master/dist/auction-timer.meta.js\n// @downloadURL    https://raw.githubusercontent.com/momocow/OGame-Redesign-v.6-Auction-Timer/master/dist/auction-timer.user.js\n// @supportURL     https://github.com/momocow/OGame-Redesign-v.6-Auction-Timer/issues\n// @run-at         document-body\n// @grant          GM_getValue\n// @grant          GM_setValue\n// ==/UserScript==\n\n/*****************************************************************************\n * Originaly developed by Vesselin\n * Currently developed by MomoCow after v3.0.0\n * Released under MIT\n *****************************************************************************/\n\n/*****************************************************************************\n * Changelog\n * ### v3.0.0\n * - [Add] provide a more stateful timer\n * - [Changed] rewritten as a ES6 script with eslint `standard` coding style\n * - [Optmized] more stable dependency check\n *****************************************************************************/\n\n/* jshint asi:true */\n'use strict';\n\nconst NOT_SUPPORTED_ENV = `[Auction Timer] The script will not work on your browser since it is out-of-date.\r\n\\nYou can either disable the script or update your browser to avoid the alert.`;\n\nclass NotSupportedError extends Error {\r\n  constructor () {\r\n    super(`${NOT_SUPPORTED_ENV}`);\r\n    this.name = 'NotSupportedError';\r\n  }\r\n}\n\nconsole.log(new NotSupportedError());\r\n\r\n// /* globals $, localStorage, io */\r\n// /* globals nodeParams, simpleCountdown, loca */\r\n\r\n// (function () {\r\n//   // The following \"if\" is not really necessary but with it this script will work for Opera too\r\n//   if (document.location.href.indexOf('/game/index.php?') < 0) { return }\r\n\r\n//   // inline config\r\n//   /**************************************/\r\n//   const {\r\n//     MAX_LOG_ENTRIES,\r\n//     MAX_DEP_TIMEOUT,\r\n//     DEP_CHECK_PERIOD,\r\n//     DEP_LIST\r\n//   } = require('./config')\r\n//   /**************************************/\r\n\r\n//   // utils\r\n//   /**************************************/\r\n//   const format = require('util')\r\n//   /**************************************/\r\n\r\n//   // functions\r\n//   /**************************************/\r\n//   const checkDependencies = function (scope, deps, cb, due) {\r\n//     due = due instanceof Date ? due : new Date(new Date().getTime() + MAX_DEP_TIMEOUT)\r\n\r\n//     const lacks = []\r\n\r\n//     if (lacks.length === 0) {\r\n//       cb(null)\r\n//     } else if (lacks.length > 0) {\r\n//       if (new Date().getTime() <= due.getTime()) { // effective\r\n//         setTimeout(checkDependencies.bind(undefined, cb, due), DEP_CHECK_PERIOD)\r\n//       } else { // expired\r\n//         cb(new DependencyError('socket.io', 'Initialization timeout'))\r\n//       }\r\n//     }\r\n//   }\r\n\r\n//   const handleAuctionPage = function () {\r\n//     let createTimer = function () {\r\n//       let oldMins = -1\r\n//       let first = false\r\n//       let overflowAuctionTimer = null\r\n//       let newMins, mins, secs, auctionTimer, auctionEndTime, currentTime\r\n//       let uni = document.location.href.replace(/^https:\\/\\/([^/]+).+/, '$1')\r\n//       function changeTimeLeft (timer, timeLeft) {\r\n//         if (typeof (timer) !== 'object') { return }\r\n//         let time = new Date()\r\n//         if (typeof (timer.countdown) === 'object') {\r\n//           timer.countdown.startTime = time.getTime()\r\n//           timer.countdown.startLeftoverTime = timeLeft\r\n//         } else if (typeof (timer.countdownObject) === 'object') {\r\n//           timer.countdownObject.startTime = time.getTime()\r\n//           timer.countdownObject.startLeftoverTime = timeLeft\r\n//         }\r\n//       }\r\n\r\n//       if ($('#auctionTimer').length) { return }\r\n//       $('p.auction_info').next().before('<span id=\"auctionTimer\" style=\"font-weight: bold; color: ' + $('p.auction_info span').css('color') + ';\"></span>')\r\n//       if ($('#div_traderAuctioneer .left_header h2').text().indexOf(loca.auctionFinished) < 0) {\r\n//         auctionEndTime = localStorage.getItem(uni + '_auctionEndTime')\r\n//         auctionEndTime = (auctionEndTime) ? parseInt(auctionEndTime) : -1\r\n//         currentTime = new Date().getTime()\r\n//         if (auctionEndTime >= currentTime) {\r\n//           secs = Math.round((auctionEndTime - currentTime) / 1000)\r\n//           oldMins = Math.ceil(secs / 60)\r\n//           first = false\r\n//         } else {\r\n//           oldMins = parseInt($('p.auction_info').text().match(/\\d+/g)[0])\r\n//           secs = oldMins * 60\r\n//           first = true\r\n//         }\r\n//         mins = oldMins\r\n//         auctionTimer = new simpleCountdown($('#auctionTimer').get(0), secs, function () { $('#auctionTimer').text('') })\r\n//       }\r\n//       let mySock = new io.connect('/auctioneer', nodeParams)\r\n//       mySock.on('timeLeft', function (msg) {\r\n//         if ($('#div_traderAuctioneer .left_header h2').text().indexOf(loca.auctionFinished) >= 0) {\r\n//           first = true\r\n//           localStorage.setItem(uni + '_auctionEndTime', '-1')\r\n//           return\r\n//         }\r\n//         auctionEndTime = localStorage.getItem(uni + '_auctionEndTime')\r\n//         auctionEndTime = (auctionEndTime) ? parseInt(auctionEndTime) : -1\r\n//         currentTime = new Date().getTime();\r\n//         /<b>\\D+(\\d+)/.exec(msg)\r\n//         newMins = parseInt(RegExp.$1)\r\n//         if (newMins === oldMins) {\r\n//           mins--\r\n//           if (first) { first = false } else if (auctionEndTime >= 0) { localStorage.setItem(uni + '_auctionEndTime', currentTime + mins * 60 * 1000) }\r\n//         } else {\r\n//           if ((newMins > oldMins) && (auctionEndTime >= currentTime)) { newMins = Math.round((auctionEndTime - currentTime) / (1000 * 60)) }\r\n//           if (first) { first = false } else if (oldMins >= 0) { localStorage.setItem(uni + '_auctionEndTime', currentTime + newMins * 60 * 1000) }\r\n//           oldMins = newMins\r\n//           mins = newMins\r\n//         }\r\n//         if (mins) { changeTimeLeft(auctionTimer, mins * 60) } else { overflowAuctionTimer = new simpleCountdown($('#auctionTimer').get(0), 30, function () { $('#auctionTimer').text('') }) }\r\n//         setTimeout(function () {\r\n//           $('#auctionTimer').css('color', $('p.auction_info span').css('color'))\r\n//         }, 100)\r\n//       })\r\n//       mySock.on('new auction', function (msg) {\r\n//         /<b>\\D+(\\d+)/.exec(msg.info)\r\n//         mins = parseInt(RegExp.$1)\r\n//         auctionTimer = new simpleCountdown($('#auctionTimer').get(0), mins * 60, function () { $('#auctionTimer').text('') })\r\n//         overflowAuctionTimer = null\r\n//         first = true\r\n//         setTimeout(function () {\r\n//           $('#auctionTimer').css('color', $('p.auction_info span').css('color'))\r\n//         }, 100)\r\n//       })\r\n//       mySock.on('auction finished', function (msg) {\r\n//         changeTimeLeft(auctionTimer, 0)\r\n//         changeTimeLeft(overflowAuctionTimer, 0)\r\n//         first = true\r\n//         localStorage.setItem(uni + '_auctionEndTime', '-1')\r\n//       })\r\n//     }\r\n\r\n//     if (document.getElementById('div_traderAuctioneer')) {\r\n//       createTimer()\r\n//     } else {\r\n//       $(document).ajaxSuccess(function () {\r\n//         if ($('#auctionTimer').length === 0) {\r\n//           createTimer()\r\n//         }\r\n//       })\r\n//     }\r\n//   }\r\n\r\n//   const handleNonAuctionPage = function () {\r\n//     let uni = document.location.href.replace(/^https:\\/\\/([^/]+).+/, '$1')\r\n//     let auctionEndTime = localStorage.getItem(uni + '_auctionEndTime')\r\n//     if (auctionEndTime == null) { return }\r\n//     auctionEndTime = parseInt(auctionEndTime)\r\n//     let currentTime = new Date().getTime()\r\n//     if (auctionEndTime < currentTime) { return }\r\n//     let clock = $('#OGameClock')\r\n//     if (clock.length <= 0) { clock = $('.OGameClock') }\r\n//     if (clock.length <= 0) { return }\r\n//     clock.parent().append('<li id=\"auctionTimer\" style=\"position: absolute; right: 125px;\"></li>')\r\n//     let auctionTimer = new simpleCountdown($('#auctionTimer').get(0),\r\n//       Math.round((auctionEndTime - currentTime) / 1000),\r\n//       function () { $('#auctionTimer').text('') })\r\n//   }\r\n//   /**************************************/\r\n\r\n//   // classes\r\n//   /**************************************/\r\n//   const { NotSupportedError } = require('./errors')\r\n  \r\n//   /**************************************/\r\n\r\n//   // init\r\n//   /**************************************/\r\n//   let LOG = console\r\n//   try {\r\n//     const { GMLogger } = require('./logger')\r\n//     LOG = new GMLogger({ MAX_LOG_ENTRIES })\r\n//   } catch (e) {\r\n//     if (e instanceof NotSupportedError) {\r\n//       window.alert(e.message)\r\n//       return\r\n//     }\r\n//   }\r\n//   /**************************************/\r\n\r\n//   try {\r\n//     if (document.location.href.indexOf('/game/index.php?page=traderOverview') >= 0) {\r\n//       checkDependencies(window, DEP_LIST.AUCTION, handleAuctionPage)\r\n//     } else if (document.getElementById('bar')) {\r\n//       checkDependencies(window, DEP_LIST.NON_AUCTION, handleNonAuctionPage)\r\n//     }\r\n//   } catch (e) {\r\n//     // LOG.\r\n//   }\r\n// })()\n\n","export const NOT_SUPPORTED_ENV = `[Auction Timer] The script will not work on your browser since it is out-of-date.\r\n\\nYou can either disable the script or update your browser to avoid the alert.`\r\n","import { NOT_SUPPORTED_ENV } from './strings'\r\n\r\nexport class DependencyError extends Error {\r\n  constructor (depName, reason) {\r\n    super(`Dependency check failed for '${depName}'. Reason: ${reason}`)\r\n    this.name = 'DependencyError'\r\n  }\r\n}\r\n\r\nexport class NotSupportedError extends Error {\r\n  constructor () {\r\n    super(`${NOT_SUPPORTED_ENV}`)\r\n    this.name = 'NotSupportedError'\r\n  }\r\n}\r\n","import { NotSupportedError } from './errors'\r\n\r\nconsole.log(new NotSupportedError())\r\n\r\n// /* globals $, localStorage, io */\r\n// /* globals nodeParams, simpleCountdown, loca */\r\n\r\n// (function () {\r\n//   // The following \"if\" is not really necessary but with it this script will work for Opera too\r\n//   if (document.location.href.indexOf('/game/index.php?') < 0) { return }\r\n\r\n//   // inline config\r\n//   /**************************************/\r\n//   const {\r\n//     MAX_LOG_ENTRIES,\r\n//     MAX_DEP_TIMEOUT,\r\n//     DEP_CHECK_PERIOD,\r\n//     DEP_LIST\r\n//   } = require('./config')\r\n//   /**************************************/\r\n\r\n//   // utils\r\n//   /**************************************/\r\n//   const format = require('util')\r\n//   /**************************************/\r\n\r\n//   // functions\r\n//   /**************************************/\r\n//   const checkDependencies = function (scope, deps, cb, due) {\r\n//     due = due instanceof Date ? due : new Date(new Date().getTime() + MAX_DEP_TIMEOUT)\r\n\r\n//     const lacks = []\r\n\r\n//     if (lacks.length === 0) {\r\n//       cb(null)\r\n//     } else if (lacks.length > 0) {\r\n//       if (new Date().getTime() <= due.getTime()) { // effective\r\n//         setTimeout(checkDependencies.bind(undefined, cb, due), DEP_CHECK_PERIOD)\r\n//       } else { // expired\r\n//         cb(new DependencyError('socket.io', 'Initialization timeout'))\r\n//       }\r\n//     }\r\n//   }\r\n\r\n//   const handleAuctionPage = function () {\r\n//     let createTimer = function () {\r\n//       let oldMins = -1\r\n//       let first = false\r\n//       let overflowAuctionTimer = null\r\n//       let newMins, mins, secs, auctionTimer, auctionEndTime, currentTime\r\n//       let uni = document.location.href.replace(/^https:\\/\\/([^/]+).+/, '$1')\r\n//       function changeTimeLeft (timer, timeLeft) {\r\n//         if (typeof (timer) !== 'object') { return }\r\n//         let time = new Date()\r\n//         if (typeof (timer.countdown) === 'object') {\r\n//           timer.countdown.startTime = time.getTime()\r\n//           timer.countdown.startLeftoverTime = timeLeft\r\n//         } else if (typeof (timer.countdownObject) === 'object') {\r\n//           timer.countdownObject.startTime = time.getTime()\r\n//           timer.countdownObject.startLeftoverTime = timeLeft\r\n//         }\r\n//       }\r\n\r\n//       if ($('#auctionTimer').length) { return }\r\n//       $('p.auction_info').next().before('<span id=\"auctionTimer\" style=\"font-weight: bold; color: ' + $('p.auction_info span').css('color') + ';\"></span>')\r\n//       if ($('#div_traderAuctioneer .left_header h2').text().indexOf(loca.auctionFinished) < 0) {\r\n//         auctionEndTime = localStorage.getItem(uni + '_auctionEndTime')\r\n//         auctionEndTime = (auctionEndTime) ? parseInt(auctionEndTime) : -1\r\n//         currentTime = new Date().getTime()\r\n//         if (auctionEndTime >= currentTime) {\r\n//           secs = Math.round((auctionEndTime - currentTime) / 1000)\r\n//           oldMins = Math.ceil(secs / 60)\r\n//           first = false\r\n//         } else {\r\n//           oldMins = parseInt($('p.auction_info').text().match(/\\d+/g)[0])\r\n//           secs = oldMins * 60\r\n//           first = true\r\n//         }\r\n//         mins = oldMins\r\n//         auctionTimer = new simpleCountdown($('#auctionTimer').get(0), secs, function () { $('#auctionTimer').text('') })\r\n//       }\r\n//       let mySock = new io.connect('/auctioneer', nodeParams)\r\n//       mySock.on('timeLeft', function (msg) {\r\n//         if ($('#div_traderAuctioneer .left_header h2').text().indexOf(loca.auctionFinished) >= 0) {\r\n//           first = true\r\n//           localStorage.setItem(uni + '_auctionEndTime', '-1')\r\n//           return\r\n//         }\r\n//         auctionEndTime = localStorage.getItem(uni + '_auctionEndTime')\r\n//         auctionEndTime = (auctionEndTime) ? parseInt(auctionEndTime) : -1\r\n//         currentTime = new Date().getTime();\r\n//         /<b>\\D+(\\d+)/.exec(msg)\r\n//         newMins = parseInt(RegExp.$1)\r\n//         if (newMins === oldMins) {\r\n//           mins--\r\n//           if (first) { first = false } else if (auctionEndTime >= 0) { localStorage.setItem(uni + '_auctionEndTime', currentTime + mins * 60 * 1000) }\r\n//         } else {\r\n//           if ((newMins > oldMins) && (auctionEndTime >= currentTime)) { newMins = Math.round((auctionEndTime - currentTime) / (1000 * 60)) }\r\n//           if (first) { first = false } else if (oldMins >= 0) { localStorage.setItem(uni + '_auctionEndTime', currentTime + newMins * 60 * 1000) }\r\n//           oldMins = newMins\r\n//           mins = newMins\r\n//         }\r\n//         if (mins) { changeTimeLeft(auctionTimer, mins * 60) } else { overflowAuctionTimer = new simpleCountdown($('#auctionTimer').get(0), 30, function () { $('#auctionTimer').text('') }) }\r\n//         setTimeout(function () {\r\n//           $('#auctionTimer').css('color', $('p.auction_info span').css('color'))\r\n//         }, 100)\r\n//       })\r\n//       mySock.on('new auction', function (msg) {\r\n//         /<b>\\D+(\\d+)/.exec(msg.info)\r\n//         mins = parseInt(RegExp.$1)\r\n//         auctionTimer = new simpleCountdown($('#auctionTimer').get(0), mins * 60, function () { $('#auctionTimer').text('') })\r\n//         overflowAuctionTimer = null\r\n//         first = true\r\n//         setTimeout(function () {\r\n//           $('#auctionTimer').css('color', $('p.auction_info span').css('color'))\r\n//         }, 100)\r\n//       })\r\n//       mySock.on('auction finished', function (msg) {\r\n//         changeTimeLeft(auctionTimer, 0)\r\n//         changeTimeLeft(overflowAuctionTimer, 0)\r\n//         first = true\r\n//         localStorage.setItem(uni + '_auctionEndTime', '-1')\r\n//       })\r\n//     }\r\n\r\n//     if (document.getElementById('div_traderAuctioneer')) {\r\n//       createTimer()\r\n//     } else {\r\n//       $(document).ajaxSuccess(function () {\r\n//         if ($('#auctionTimer').length === 0) {\r\n//           createTimer()\r\n//         }\r\n//       })\r\n//     }\r\n//   }\r\n\r\n//   const handleNonAuctionPage = function () {\r\n//     let uni = document.location.href.replace(/^https:\\/\\/([^/]+).+/, '$1')\r\n//     let auctionEndTime = localStorage.getItem(uni + '_auctionEndTime')\r\n//     if (auctionEndTime == null) { return }\r\n//     auctionEndTime = parseInt(auctionEndTime)\r\n//     let currentTime = new Date().getTime()\r\n//     if (auctionEndTime < currentTime) { return }\r\n//     let clock = $('#OGameClock')\r\n//     if (clock.length <= 0) { clock = $('.OGameClock') }\r\n//     if (clock.length <= 0) { return }\r\n//     clock.parent().append('<li id=\"auctionTimer\" style=\"position: absolute; right: 125px;\"></li>')\r\n//     let auctionTimer = new simpleCountdown($('#auctionTimer').get(0),\r\n//       Math.round((auctionEndTime - currentTime) / 1000),\r\n//       function () { $('#auctionTimer').text('') })\r\n//   }\r\n//   /**************************************/\r\n\r\n//   // classes\r\n//   /**************************************/\r\n//   const { NotSupportedError } = require('./errors')\r\n  \r\n//   /**************************************/\r\n\r\n//   // init\r\n//   /**************************************/\r\n//   let LOG = console\r\n//   try {\r\n//     const { GMLogger } = require('./logger')\r\n//     LOG = new GMLogger({ MAX_LOG_ENTRIES })\r\n//   } catch (e) {\r\n//     if (e instanceof NotSupportedError) {\r\n//       window.alert(e.message)\r\n//       return\r\n//     }\r\n//   }\r\n//   /**************************************/\r\n\r\n//   try {\r\n//     if (document.location.href.indexOf('/game/index.php?page=traderOverview') >= 0) {\r\n//       checkDependencies(window, DEP_LIST.AUCTION, handleAuctionPage)\r\n//     } else if (document.getElementById('bar')) {\r\n//       checkDependencies(window, DEP_LIST.NON_AUCTION, handleNonAuctionPage)\r\n//     }\r\n//   } catch (e) {\r\n//     // LOG.\r\n//   }\r\n// })()\r\n"]}